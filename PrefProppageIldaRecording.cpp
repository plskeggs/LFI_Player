//
// *********************************************************
// *                                                       *
// * Copyright 1998-2022, Lazerus Laser Systems            *
// * Author: Michael G. Svob                               *
// *                                                       *
// * File Name: PrefProppageIldaRecording.cpp              *
// * Description: Implementation of the                    *
// * CPrefProppageIldaRecording class, which is the ILDA   *
// * Recording property page.                              *
// *                                                       *
// * NOTE: This file was generated by MS Visual Studio,    *
// *       and modified by the author as necessary for     *
// *       the LFI Player application.
// *                                                       *
// * This code is distributed under the GNU Public License *
// * which can be found at...                              *
// *                                                       *
// * http://www.gnu.org/licenses/gpl.txt                   *
// *                                                       *
// *********************************************************
//

#include "stdafx.h"
#include "Cheap3D.h"
#include "PrefProppageIldaRecording.h"
#include "Cheap3DView.h"
#include <iostream>
#include <fstream>

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

using namespace std; 

extern ofstream logFile;

/////////////////////////////////////////////////////////////////////////////
// CPrefProppageIldaRecording property page

IMPLEMENT_DYNCREATE(CPrefProppageIldaRecording, CPropertyPage)

CPrefProppageIldaRecording::CPrefProppageIldaRecording() : CPropertyPage(CPrefProppageIldaRecording::IDD)
{
	//{{AFX_DATA_INIT(CPrefProppageIldaRecording)
	m_EditNumberOfFrames2Record = 0;
	m_RadioRecordPaletteType = -1;
	m_RadioRecordViewType = -1;
	//}}AFX_DATA_INIT
}

BOOL CPrefProppageIldaRecording::OnSetActive()
{
    m_EditNumberOfFrames2Record = parentPtr->numFramesToWrite;
	m_RadioRecordPaletteType = (int)(parentPtr->recordPaletteType);
	m_RadioRecordViewType = (int)(parentPtr->recordViewType);

	UpdateData(FALSE);

	return true;
}

CPrefProppageIldaRecording::~CPrefProppageIldaRecording()
{
}

void CPrefProppageIldaRecording::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CPrefProppageIldaRecording)
	DDX_Text(pDX, IDC_EDIT_NUM_FRAMES2RECORD, m_EditNumberOfFrames2Record);
	DDX_Radio(pDX, IDC_RECORD_PALETTE_PANGOLIN, m_RadioRecordPaletteType);
	DDX_Radio(pDX, IDC_RECORD_VIEW_WORLD, m_RadioRecordViewType);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CPrefProppageIldaRecording, CPropertyPage)
	//{{AFX_MSG_MAP(CPrefProppageIldaRecording)
	ON_EN_UPDATE(IDC_EDIT_NUM_FRAMES2RECORD, OnUpdateEditNumFrames2record)
	ON_BN_CLICKED(IDC_RECORD_PALETTE_PANGOLIN, OnRecordPalettePangolin)
	ON_BN_CLICKED(IDC_RECORD_PALETTE_LI, OnRecordPaletteLaserIllusions)
	ON_BN_CLICKED(IDC_RECORD_PALETTE_ILDA, OnRecordPaletteILDA)
	ON_BN_CLICKED(IDC_RECORD_PALETTE_X29, OnRecordPaletteX29)
	ON_BN_CLICKED(IDC_RECORD_PALETTE_TRUECOLOR, OnRecordPaletteTrueColor)
	ON_BN_CLICKED(IDC_RECORD_VIEW_EYE, OnRecordViewEye)
	ON_BN_CLICKED(IDC_RECORD_VIEW_WORLD, OnRecordViewWorld)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CPrefProppageIldaRecording message handlers

void CPrefProppageIldaRecording::OnUpdateEditNumFrames2record() 
{
	// TODO: If this is a RICHEDIT control, the control will not
	// send this notification unless you override the CDialog::OnInitDialog()
	// function to send the EM_SETEVENTMASK message to the control
	// with the ENM_UPDATE flag ORed into the lParam mask.
	
	// TODO: Add your control notification handler code here
	UpdateData(TRUE);

	if (m_EditNumberOfFrames2Record >= 0 &&
		//m_EditNumberOfFrames2Record <= 1000)
		m_EditNumberOfFrames2Record <= 65535)
	{
	    parentPtr->numFramesToWrite = m_EditNumberOfFrames2Record;
	}
	else
	{
        m_EditNumberOfFrames2Record = parentPtr->numFramesToWrite;
		UpdateData(FALSE);
	}
}

void CPrefProppageIldaRecording::OnRecordPalettePangolin() 
{
    parentPtr->recordPaletteType = PaletteType::PANGOLIN;
}

void CPrefProppageIldaRecording::OnRecordPaletteLaserIllusions() 
{
    parentPtr->recordPaletteType = PaletteType::LASER_ILLUSIONS;	
}

void CPrefProppageIldaRecording::OnRecordPaletteILDA() 
{
    parentPtr->recordPaletteType = PaletteType::ILDA;
}

void CPrefProppageIldaRecording::OnRecordPaletteX29() 
{
    parentPtr->recordPaletteType = PaletteType::X29;
}

void CPrefProppageIldaRecording::OnRecordPaletteTrueColor()
{
	parentPtr->recordPaletteType = PaletteType::TRUECOLOR;
}

void CPrefProppageIldaRecording::OnRecordViewEye() 
{
    parentPtr->recordViewType = EYE;	
}

void CPrefProppageIldaRecording::OnRecordViewWorld() 
{
    parentPtr->recordViewType = WORLD;	
}

