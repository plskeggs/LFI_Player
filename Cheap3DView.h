//
// *********************************************************
// *                                                       *
// * Copyright 1998-2022, Lazerus Laser Systems            *
// * Author: Michael G. Svob                               *
// *                                                       *
// * File Name: Cheap3DView.h                              *
// * Description: This file contains the interface for the *
// *              CCheap3DView form class.                 *
// *                                                       *
// * NOTE: This file was generated by MS Visual Studio,    *
// *       and modified by the author as necessary for     *
// *       the LFI Player application.
// *                                                       *
// * This code is distributed under the GNU Public License *
// * which can be found at...                              *
// *                                                       *
// * http://www.gnu.org/licenses/gpl.txt                   *
// *                                                       *
// *********************************************************
//

#if !defined(AFX_CHEAP3DVIEW_H__984EA60D_2F4F_11D4_A333_E761A585437E__INCLUDED_)
#define AFX_CHEAP3DVIEW_H__984EA60D_2F4F_11D4_A333_E761A585437E__INCLUDED_

#include <stdio.h>
#include <conio.h>

#ifndef ABSTRACT_H
#include "abstract.h"
#endif

#ifndef FRAME_H
#include "FRAME.h"
#endif

#ifndef FRAMESEQUENCE_H
#include "FRAMESEQ.h"
#endif

#ifndef TEXTSCROLL_H
#include "TextScroll.h"
#endif

#ifndef TRACK_H
#include "TRACK.h"
#endif

#ifndef TRACKLIST_H
#include "TRACKLST.H"
#endif

#ifndef GEM_PC_H
#include "Gem_pc.h"
#endif

#ifndef DEVICE_GWS_H
#include "Device_GWS.h"
#endif

#ifndef DEVICE_RIYA_H
#include "Device_RIYA.h"
#endif

#ifndef DEVICE_BSOFT_XYI_H
#include "Device_BSOFT_XYI.h"
#endif

#ifndef DEVICE_BSOFT_RGB_H
#include "Device_BSOFT_RGB.h"
#endif

#ifndef DEVICE_NONE_H
#include "Device_None.h"
#endif

#ifndef DEVICE_EZAUDDAC_H
#include "Device_EzAudDac.h"
#endif

#ifndef DEVICE_EASYLASE_H
#include "Device_Easylase.h"
#endif

#ifndef GLOBALS_H
#include "globals.h"
#endif

#ifndef ROUTINES_H
#include "routines.h"
#endif

#ifndef VIEW_H
#include "view.h"
#endif

#ifndef JOBBLOCK_H
#include "jobblock.h"
#endif

#ifndef PALETTE_H
#include "Palette.h"
#endif

#include "Cheap3DDoc.h"
#include "MainFrm.h"
#include "LiveControl.h"
#include "AbstractControl.h"
#include "Preferences.h"

// Following for MIDI stuff...
 #include "MidiIn.h"
// End MIDI stuff

#ifdef USE_SERIAL_COM
#include "SerialMfc.h"
#include "RichCommEdit.h"
#endif

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

const enum  EnumArmState{DISARM_TRACK     = 0,
                         ARM_TRACK        = 1,
                         TOGGLE_TRACK_ARM = 2};

typedef enum
{
    NORMAL     = 0,
    SHOWPOINTS = 1,
} BeamViewMode_T;

#define PPS_TIMER_VALUE  500

typedef struct
{
    ViewType   originalView;
    double      lastDragXangle;
    double      lastDragYangle;
    double      lastDragZangle;
    double      lastDragXdiff;
    double      lastDragYdiff;
    double      lastDragZdiff;
} DragTrackItems_T;

typedef struct
{
    DragTrackItems_T   trackItems[MAX_TRACKS];
//    CRect       displayRect;
    CPoint             startPoint;
    CPoint             upperLeft;
    CPoint             lowerRight;
    M_INT32            windowSize;
    M_UINT32           numberOfMoves;
    UINT               inertiaRemaining;    
}DragObject_T;

class CCheap3DView : public CFormView
{
    friend CLiveControl;
    friend CAbstractControl;
    friend CPreferences;
    friend CPrefProppageColor;
    friend CPrefProppageDisplayTimer;
    friend CPrefProppageIldaRecording;
    friend CPrefProppageLiveControl;
    friend CPrefProppageOutput;
    friend CPrefProppageBeamView;
    friend CPageComSettings;

protected: // create from serialization only
    CCheap3DView();
    DECLARE_DYNCREATE(CCheap3DView)

    //{{AFX_DATA(CCheap3DView)
    enum { IDD = IDD_CHEAP3D_FORM };
    CSliderCtrl	m_SliderTrackCameraAngle;
    CSliderCtrl	m_SliderTrackRedBalance;
    CSliderCtrl	m_SliderTrackGreenBalance;
    CSliderCtrl	m_SliderTrackBlueBalance;
    CSliderCtrl	m_SliderTrackScale;
    CSliderCtrl	m_SliderBlankDelay;
    CSliderCtrl	m_SliderFocusTrackRepeat;
    CSliderCtrl	m_SliderFocusTrackDelay;
    BOOL	m_DisplayTrack1;
    BOOL	m_DisplayTrack2;
    BOOL	m_DisplayTrack3;
    BOOL	m_DisplayTrack4;
    BOOL	m_ArmTrack1;
    BOOL	m_ArmTrack2;
    BOOL	m_ArmTrack3;
    BOOL	m_ArmTrack4;
    M_UINT32	m_FocusTrackDelay;
    UINT	m_BlankingDelay;
    BOOL	m_PointsOnly;
    int		m_TrackFocusButton;
    BOOL	m_EffectTrack1;
    BOOL	m_EffectTrack2;
    BOOL	m_EffectTrack3;
    BOOL	m_EffectTrack4;
    BOOL	m_RotateAbout0_1;
    BOOL	m_RotateAbout0_2;
    BOOL	m_RotateAbout0_3;
    BOOL	m_RotateAbout0_4;
    UINT	m_TrackScale;
    BOOL	m_DisplayCoordinates;
    double	m_FromPointX;
    double	m_FromPointY;
    double	m_FromPointZ;
    double	m_AtPointX;
    double	m_AtPointY;
    double	m_AtPointZ;
    int		m_ILDA_Palette_Button;
    BOOL	m_Reverse;
    UINT	m_TrackBlueBalance;
    UINT	m_TrackGreenBalance;
    UINT	m_TrackRedBalance;
    UINT	m_TrackCameraAngle;
    BOOL	m_DisplayBeamView;
    long	m_FocusTrackRepeat;
    //}}AFX_DATA

// Attributes
public:
    CCheap3DDoc* GetDocument();

// Operations
public:

// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CCheap3DView)
    public:
    virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
    virtual void OnInitialUpdate();
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

// Implementation
public:
    virtual ~CCheap3DView();
    void SetLaserPort(M_UINT16  laserPort)
    {
        gemLaserPtr->SetBasePort(laserPort);
    }

    M_UINT16  GetLaserPort() {return gemLaserPtr->GetBasePort();}

    void SetDisplayTimerValue(M_UINT32 newDisplayTimerValue)
    {
        displayTimerValue = newDisplayTimerValue;
    }

    M_UINT32  GetDisplayTimerValue() {return displayTimerValue;}

    M_UINT16  GetInvertBlankingValue() {return invertBlanking;}

    ILDAFormatCode GetRecordFormatCode(void);

#ifdef _DEBUG
    virtual void AssertValid() const;
    virtual void Dump(CDumpContext& dc) const;
#endif

protected:

// Generated message map functions
protected:
    //{{AFX_MSG(CCheap3DView)
    afx_msg void OnTimer(UINT nIDEvent);
    afx_msg void OnOpenCtsFile();
    afx_msg void OnOpenIldaFile();
    afx_msg void OnFileClosetracklist();
    afx_msg void OnDisplayPlay();
    afx_msg void OnDisplayPause();
    afx_msg void OnDisplayRotatePlusX();
    afx_msg void OnDisplayRotateMinusX();
    afx_msg void OnDisplayRotatePlusY();
    afx_msg void OnDisplayRotateMinusY();
    afx_msg void OnDisplayRotatePlusZ();
    afx_msg void OnDisplayRotateMinusZ();
    afx_msg void OnDisplayRotateBothPlusX();
    afx_msg void OnDisplayRotateBothMinusX();
    afx_msg void OnDisplayRotateBothPlusY();
    afx_msg void OnDisplayRotateBothMinusY();
    afx_msg void OnDisplayRotateBothPlusZ();
    afx_msg void OnDisplayRotateBothMinusZ();
    afx_msg void OnCheckArm1();
    afx_msg void OnCheckArm2();
    afx_msg void OnCheckArm3();
    afx_msg void OnCheckArm4();
    afx_msg void OnCheckDisplay1();
    afx_msg void OnCheckDisplay2();
    afx_msg void OnCheckDisplay3();
    afx_msg void OnCheckDisplay4();
    afx_msg void OnRadioFocus1();
    afx_msg void OnRadioFocus2();
    afx_msg void OnRadioFocus3();
    afx_msg void OnRadioFocus4();
    afx_msg void OnDisplayZoomIn();
    afx_msg void OnDisplayZoomOut();
    afx_msg void OnDisplayIncreaseDelay();
    afx_msg void OnDisplayDecreaseDelay();
    afx_msg void OnDisplayIncreaseFocusRepeat();
    afx_msg void OnDisplayDecreaseFocusRepeat();
    afx_msg void OnDisplayIncreaseBlankingDelay();
    afx_msg void OnDisplayDecreaseBlankingDelay();
    afx_msg void OnDisplayIncreaseGlobalDelay();
    afx_msg void OnDisplayDecreaseGlobalDelay();
    afx_msg void OnDisplayIncreaseTrackScale();
    afx_msg void OnDisplayDecreaseTrackScale();
    afx_msg void OnDisplayIncreaseLaserScale();
    afx_msg void OnDisplayDecreaseLaserScale();
    afx_msg void OnDisplayIncreaseMoveIncrement();
    afx_msg void OnDisplayDecreaseMoveIncrement();
    afx_msg void OnDisplayIncreaseZoomIncrement();
    afx_msg void OnDisplayDecreaseZoomIncrement();
    afx_msg void OnDisplayIncreaseRotateIncrement();
    afx_msg void OnDisplayDecreaseRotateIncrement();
    afx_msg void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
#ifdef LEGACY_OUTPUT
    afx_msg void OnOptionsSelectport();
#endif
    afx_msg void OnButtonReset();
    afx_msg void OnCheckPointsOnly();
    afx_msg void OnOpenClvFile();
    afx_msg void OnLiveButton1();
    afx_msg void OnLiveButton2();
    afx_msg void OnLiveButton3();
    afx_msg void OnLiveButton4();
    afx_msg void OnLiveButton5();
    afx_msg void OnLiveButton6();
    afx_msg void OnLiveButton7();
    afx_msg void OnLiveButton8();
    afx_msg void OnLiveButton9();
    afx_msg void OnLiveButton10();
    afx_msg void OnLiveButton11();
    afx_msg void OnLiveButton12();
    afx_msg void OnLiveButton13();
    afx_msg void OnLiveButton14();
    afx_msg void OnLiveButton15();
    afx_msg void OnLiveButton16();
    afx_msg void OnLiveButton17();
    afx_msg void OnLiveButton18();
    afx_msg void OnLiveButton19();
    afx_msg void OnLiveButton20();
    afx_msg void OnLiveButton21();
    afx_msg void OnLiveButton22();
    afx_msg void OnLiveButton23();
    afx_msg void OnLiveButton24();
    afx_msg void OnLiveButton25();
    afx_msg void OnLiveButton26();
    afx_msg void OnLiveButton27();
    afx_msg void OnLiveButton28();
    afx_msg void OnLiveButton29();
    afx_msg void OnLiveButton30();
    afx_msg void OnLiveButton31();
    afx_msg void OnLiveButton32();
    afx_msg void OnLiveButton33();
    afx_msg void OnLiveButton34();
    afx_msg void OnLiveButton35();
    afx_msg void OnLiveButton36();
    afx_msg void OnLiveButton37();
    afx_msg void OnLiveButton38();
    afx_msg void OnLiveButton39();
    afx_msg void OnLiveButton40();
    afx_msg void OnLiveButton41();
    afx_msg void OnLiveButton42();
    afx_msg void OnLiveButton43();
    afx_msg void OnLiveButton44();
    afx_msg void OnLiveButton45();
    afx_msg void OnLiveButton46();
    afx_msg void OnLiveButton47();
    afx_msg void OnLiveButton48();
    afx_msg void OnLivePageNext();
    afx_msg void OnLivePagePrevious();
    afx_msg void OnMoveBothPlusX();
    afx_msg void OnMoveBothMinusX();
    afx_msg void OnMoveBothPlusY();
    afx_msg void OnMoveBothMinusY();
    afx_msg void OnMoveBothPlusZ();
    afx_msg void OnMoveBothMinusZ();
    afx_msg void OnMoveFromPlusX();
    afx_msg void OnMoveFromMinusX();
    afx_msg void OnMoveFromPlusY();
    afx_msg void OnMoveFromMinusY();
    afx_msg void OnMoveFromPlusZ();
    afx_msg void OnMoveFromMinusZ();
    afx_msg void OnMoveAtPlusX();
    afx_msg void OnMoveAtMinusX();
    afx_msg void OnMoveAtPlusY();
    afx_msg void OnMoveAtMinusY();
    afx_msg void OnMoveAtPlusZ();
    afx_msg void OnMoveAtMinusZ();
    afx_msg void OnMoveForward();
    afx_msg void OnMoveBackward();
    afx_msg void OnCheckEffect1();
    afx_msg void OnCheckEffect2();
    afx_msg void OnCheckEffect3();
    afx_msg void OnCheckEffect4();
    afx_msg void OnCheckRotAbt01();
    afx_msg void OnCheckRotAbt02();
    afx_msg void OnCheckRotAbt03();
    afx_msg void OnCheckRotAbt04();
    afx_msg void OnPaint();
    afx_msg void OnCheckDisplayCoordinates();
    afx_msg void OnOpenAbsFile();
    afx_msg void OnOptionsPreferences();
    afx_msg void OnDisplayRewind();
    afx_msg void OnRadioPangolin();
    afx_msg void OnRadioLaserIllusions();
    afx_msg void OnRadioX29();
    afx_msg void OnDisplayRecord();
    afx_msg void OnCheckReverse();
    afx_msg void OnRadioIlda();
    afx_msg void OnLButtonDown(UINT nFlags, CPoint point);
    afx_msg void OnLButtonUp(UINT nFlags, CPoint point);
    afx_msg void OnMouseMove(UINT nFlags, CPoint point);
    afx_msg void OnCheckBeamview();
    afx_msg void OnOpenTxtFile();
    //}}AFX_MSG
#ifdef USE_SERIAL_COM
    afx_msg LRESULT OnSerialMsg (WPARAM wParam, LPARAM lParam);
#endif
    DECLARE_MESSAGE_MAP()

    // My member functions
private:
    void ProcessRemainingInertia(void);    
    void UpdateDisplayWindowValues(void);
    void InsertPointDelay(void);
protected:
    void InitTrackVariables();
    void InitTrack(const Track::TrackType trackType);
    void CleanViewPort();
    void DisplayAllTracks();
    void ReadCtsFile();
    void AbortScript(LPCTSTR abortMsg="");
    M_UINT16  ProcessMidiEvent();
    M_UINT16  ProcessMidiWaitForContinuation();
    M_UINT16  DisplayIldaFrame(Frame* framePtr);
    M_UINT16  DisplayAbstractFrame(Abstract* abstractPtr,
                                   M_UINT32 numberOfFrames);
    M_UINT16  DisplayTextFrame(TextScroll* const textPtr);
    M_UINT16  DisplaySegment(Point*     currPointPtr,
                             Point*     nextPointPtr,
                             M_UINT8    redValue,
                             M_UINT8    greenValue,
                             M_UINT8    blueValue,
                             M_INT16   pointNumber);
    OutputPoint_T AddBlankingShift(double xVal,
                                   double yVal,
                                   M_UINT8 rVal,
                                   M_UINT8 gVal,
                                   M_UINT8 bVal,
                                   M_UINT8 iVal,
                                   M_INT8 shift);
    M_UINT16  DoJustDisplay(void);
    M_UINT16  DoFade(void);
    M_UINT16  DoCrossFade(void);
    M_UINT16  DoRotate(M_UINT16  pointToRotate);
    M_UINT16  DoZoom(void);
    M_UINT16  DoMoveForward(M_UINT16  pointsToMove);
    M_UINT16  DoMoveAt(M_UINT16  decrementFrameCount);
    M_UINT16  DoMoveFrom(M_UINT16  decrementFrameCount);
    M_UINT16  DoTrackManipulation(void);

    void      OpenIldaFile(char* fileName);
    void      OpenAbsFile(char* fileName);
    void      OpenTxtFile(char* fileName);
    void      OpenCtsFile(char* fileName);
    void      OpenClvFile(char* fileName);

    M_UINT8     GetClosestPaletteIndex(PALETTE_PTR_T colorPalettePtr,
                                     M_UINT8    redValue,
                                     M_UINT8    greenValue,
                                     M_UINT8    blueValue);
    PaletteEntryType GetPaletteEntry(PALETTE_PTR_T colorPalettePtr,
                                     M_UINT8 colorIndex)
    {
        return(colorPalettePtr[colorIndex]);
    }

    // Support methods
    void SetTrackFocus(int focusTrack);
    void SetCleanDisplayTimer(void);
    void SetTrackDisplayValue(M_UINT16 trackNum,
                              BOOL     trackVal);
    void SetTrackArmValue(M_UINT16 trackNum,
                          BOOL     trackVal);
    void SetTrackArmState(M_UINT16 trackNum,
                          EnumArmState newState = TOGGLE_TRACK_ARM);
    void SetTracksJobBlocks(const JobBlock setJobBlock);
    void SetTrackJobBlock(const JobBlock setJobBlock,
                          const M_UINT16   trackNumber);
    void SetPointsPerSecondPane(long newPointsPerSecond);
    void SetAppStatusPane(CString newAppStatus);
    void SetPlaybackTimerPane(long playbackTime);
    void SetMidiDevicePane(M_UINT16 numMidiDevices);

    // All the laser specific data members
    Gem_PC*         gemScreenPtr;
    // Since each track can potentially write to a different
    // device, 4 different output devices are instantiated
    // at any given time.
    Gem_PC*         outputDeviceArray[MAX_TRACKS];
    // Following is a pointer to the "current" device
    // designated for output.
    Gem_PC*         gemLaserPtr;
    TrackList       trackList;
    Track*          trackPtr;
    Frame*          framePtr;
    DisplayParams   displayParams;
    ViewType        displayView;
    FILE*           ctsFilePtr;
    M_INT32         saveFilePos;
    CClientDC*      clientDCPtr;
    char            contentDirectoryName[MAX_BASENAME_SIZE];
    time_t          playbackTime;

#ifdef USE_SERIAL_COM
    CRichCommEdit	m_wndEdit;
        // Attributes
    CString	        strComPort;
    CSerialMFC      serialPort;
    M_UINT16        useSerialPort;
public:
    char            serialCommandString[101];
    int             serialCommandIndex;
#endif

protected:
    // following for setting the main window size...
    RECT            mainWindowRect;
    BOOL            initMainWindow;

    CDC             memoryContext;
    CBitmap         memoryBitmap;
    M_UINT16        trackNumber;
    M_UINT16        firstTime;
    BOOL            firstTime2;
    M_UINT16        scriptActive;
    M_UINT16        invertBitmap;
    M_INT32         numPointsDisplayed;

    M_UINT32        defaultGlobalDelay;
    M_UINT32        defaultLaserScale;
    M_UINT32        defaultVerticalScale;
    M_INT32         numberOfLoops;
    M_INT32         loopCounter;
    enum Track::TrackType trackType;
    CLiveControl*   liveDialog;
    CAbstractControl* abstractDialog;
    
    CPreferences*   preferencesDialog;

    M_UINT16        commandInProgress;
    JobBlock        jobBlock;
    CPoint          upperLeft;
    CPoint          lowerRight;
    UINT            leftPreviewEdgePixels;
    CMainFrame*     parentFramePtr;
    DragObject_T*   dragObjectPtr;

// Following for display timer parameters.
//    M_UINT32  outputDelayPeriod;
    M_UINT32  outputPPS;
    M_UINT32  displayTimerValue;
    BOOL      displayTimerSet;

// End display timer parameters

// Following for color parameters...
    enum  DisplayColorMode colorMode;
    double masterRed;
    double masterGreen;
    double masterBlue;
    double ttlThresholdRed;
    double ttlThresholdGreen;
    double ttlThresholdBlue;
// End color parameters

// Following for ILDA recording parameters...
    FILE*                 outFile;
    M_UINT16              numFramesToWrite;
    M_UINT16              currentFrameNumber;
    M_UINT16              currentNumberPoints;
    enum PaletteType      recordPaletteType;
    enum DisplayViewType  recordViewType;
    M_INT32*              frameNumPosArray;
// End recording parameters

// Following for live control parameters...
    UINT	fadeInFrames;
    UINT	fadeOutFrames;
    UINT	colorIntensity;
    UINT	moveIncrement;
    UINT	rotateIncrement;
    UINT	zoomIncrement;
    UINT    dragInertia;
    UINT    dragSpeed;
    // Note that globalFrameRepeat is currently
    // accessed exclusively by the slider in the
    // Live Control Panel.
    INT     globalFrameRepeat;
// End live control parameters

// Following for beam view parameters...
    BeamViewMode_T  beamMode;
    double beamOriginX1;
    double beamOriginY1;
    double beamOriginX2;
    double beamOriginY2;
    double beamHeight1;
    double beamHeight2;
    BOOL  beamOn1;
    BOOL  beamOn2;
    BOOL  beamInvertX1;
    BOOL  beamInvertX2;
    BOOL  beamYagView;
// End beam view parameters

// Following for output parameters...
    BOOL	  displayLaser;
    BOOL	  displayScreen;
    BOOL      flickerFree;
    BOOL      blankClipView;
    M_UINT16  invertBlanking;
    BOOL	  scriptRepeat;
    UINT      laserScale;
    UINT	  verticalScale;
    UINT	  globalTrackDelay;
    INT       blankingShift;
// End output parameters

// Following for MIDI stuff...
    Midi*           midiPtr;

// End MIDI stuff

#ifdef LATEST_BLANKING_MOD
    double     lastValidNDC_X;
    double     lastValidNDC_Y;
#endif

    // Need the following goofy ass macro because the
    // focus button numbers start at 0 under the covers,
    // but the actual track numbers start at 1.
    #define m_TrackFocus  m_TrackFocusButton + 1

    #define adjustScale(theScale) \
    (100.0 - ((100.0 - (double)theScale) / 2.0)) / 100.0

    #define MaxScreenValue(theScale, absoluteMax) \
            (long)((double)absoluteMax * theScale)
    #define MinDeviceValue(maxDeviceValue, absoluteMax, absoluteMin) \
            (long)(absoluteMin + (absoluteMax - maxDeviceValue))
    #define MaxLaserValue(theScale, absoluteMax) \
            (long)((double)absoluteMax * theScale * adjustScale(laserScale))
};

#ifndef _DEBUG  // debug version in Cheap3DView.cpp
inline CCheap3DDoc* CCheap3DView::GetDocument()
   { return (CCheap3DDoc*)m_pDocument; }
#endif

/////////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Developer Studio will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_CHEAP3DVIEW_H__984EA60D_2F4F_11D4_A333_E761A585437E__INCLUDED_)
