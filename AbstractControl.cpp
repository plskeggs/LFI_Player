//
// *********************************************************
// *                                                       *
// * Copyright 1998-2022, Lazerus Laser Systems            *
// * Author: Michael G. Svob                               *
// *                                                       *
// * File Name: AbstractControl.cpp                        *
// * Description: Implementation of the AbstractControl    *
// * dialog class.  This provides the interface for        *
// * modifying and saving LFI_Player abstracts.            *
// *                                                       *
// * NOTE: Some or all of the code contained in this file  *
// *       was generated by the Visual Studio MFC          *
// *       framework, and modified by the author as        *
// *       necessary for this application.                 *
// *                                                       *
// * This code is distributed under the GNU Public License *
// * which can be found at...                              *
// *                                                       *
// * http://www.gnu.org/licenses/gpl.txt                   *
// *                                                       *
// *********************************************************
//

#include "stdafx.h"
#include "Cheap3D.h"
#include "AbstractControl.h"
#include "Cheap3DView.h"

#include <iostream>
#include <fstream>
#include <direct.h>
#include <conio.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

using namespace std; 

extern ofstream logFile;
extern char appDirName[_MAX_PATH];

/////////////////////////////////////////////////////////////////////////////
// CAbstractControl dialog


CAbstractControl::CAbstractControl(CWnd* pParent /*=NULL*/)
    : CDialog(CAbstractControl::IDD, pParent)
{
    parentPtr = (CCheap3DView*)pParent;
    //{{AFX_DATA_INIT(CAbstractControl)
    m_EditGChangeNumber = 0;
    m_EditZChangeNumber = 0;
    m_EditZzChangeNumber = 0;
    m_EditFactor1 = 0;
    m_EditFactor2 = 0;
    m_EditBlankSpeed = 0;
    m_EditColorSpeed = 0;
    m_EditBlueOffset = 0;
    m_EditGreenOffset = 0;
    m_EditRedOffset = 0;
    m_EditFactor3 = 0;
    m_EditFactor4 = 0;
    m_EditFactor5 = 0;
    m_EditFactor6 = 0;
    m_EditFactor7 = 0;
    m_EditBlankSpot = 0;
    m_AbstractPattern = 0;
    m_EditZAxisGain = 0;
    m_EditAbsPtsPerFrame = 0;
    m_EditZAxisOffset = 0;
    m_UsePalette = FALSE;
    m_EditGDepth = 0;
    m_RadioGShape = SINE;
    m_ColorShift = 0;
    //}}AFX_DATA_INIT
}


void CAbstractControl::DoDataExchange(CDataExchange* pDX)
{
    CDialog::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CAbstractControl)
    DDX_Control(pDX, IDC_SLIDER_GDEPTH, m_SliderGDepth);
    DDX_Control(pDX, IDC_SLIDER_ZAXISOFFSET, m_SliderZAxisOffset);
    DDX_Control(pDX, IDC_SLIDER_ABSPTSPERFRAME, m_SliderAbsPtsPerFrame);
    DDX_Control(pDX, IDC_SLIDER_ZAXISGAIN, m_SliderZAxisGain);
    DDX_Control(pDX, IDC_SLIDER_BLANKSPOT, m_SliderBlankSpot);
    DDX_Control(pDX, IDC_SLIDER_FACTOR7, m_SliderFactor7);
    DDX_Control(pDX, IDC_SLIDER_FACTOR6, m_SliderFactor6);
    DDX_Control(pDX, IDC_SLIDER_FACTOR5, m_SliderFactor5);
    DDX_Control(pDX, IDC_SLIDER_FACTOR4, m_SliderFactor4);
    DDX_Control(pDX, IDC_SLIDER_FACTOR3, m_SliderFactor3);
    DDX_Control(pDX, IDC_SLIDER_REDOFFSET, m_SliderRedOffset);
    DDX_Control(pDX, IDC_SLIDER_GREENOFFSET, m_SliderGreenOffset);
    DDX_Control(pDX, IDC_SLIDER_BLUEOFFSET, m_SliderBlueOffset);
    DDX_Control(pDX, IDC_SLIDER_COLORSPD, m_SliderColorSpeed);
    DDX_Control(pDX, IDC_SLIDER_BLANKSPD, m_SliderBlankSpeed);
    DDX_Control(pDX, IDC_SLIDER_FACTOR2, m_SliderFactor2);
    DDX_Control(pDX, IDC_SLIDER_FACTOR1, m_SliderFactor1);
    DDX_Control(pDX, IDC_SLIDER_ZZCHANGENUM, m_SliderZzChangeNumber);
    DDX_Control(pDX, IDC_SLIDER_GCHANGENUM, m_SliderGChangeNumber);
    DDX_Control(pDX, IDC_SLIDER_ZCHANGENUM, m_SliderZChangeNumber);
    DDX_Text(pDX, IDC_EDIT_GCHANGENUM, m_EditGChangeNumber);
    DDX_Text(pDX, IDC_EDIT_ZCHANGENUM, m_EditZChangeNumber);
    DDX_Text(pDX, IDC_EDIT_ZZCHANGENUM, m_EditZzChangeNumber);
    DDX_Text(pDX, IDC_EDIT_FACTOR1, m_EditFactor1);
    DDX_Text(pDX, IDC_EDIT_FACTOR2, m_EditFactor2);
    DDX_Text(pDX, IDC_EDIT_BLANKSPD, m_EditBlankSpeed);
    DDX_Text(pDX, IDC_EDIT_COLORSPD, m_EditColorSpeed);
    DDX_Text(pDX, IDC_EDIT_BLUEOFFSET, m_EditBlueOffset);
    DDX_Text(pDX, IDC_EDIT_GREENOFFSET, m_EditGreenOffset);
    DDX_Text(pDX, IDC_EDIT_REDOFFSET, m_EditRedOffset);
    DDX_Text(pDX, IDC_EDIT_FACTOR3, m_EditFactor3);
    DDX_Text(pDX, IDC_EDIT_FACTOR4, m_EditFactor4);
    DDX_Text(pDX, IDC_EDIT_FACTOR5, m_EditFactor5);
    DDX_Text(pDX, IDC_EDIT_FACTOR6, m_EditFactor6);
    DDX_Text(pDX, IDC_EDIT_FACTOR7, m_EditFactor7);
    DDX_Text(pDX, IDC_EDIT_BLANKSPOT, m_EditBlankSpot);
    DDX_Radio(pDX, IDC_ABS_PATTERN1, m_AbstractPattern);
    DDX_Radio(pDX, IDC_ABS_ZAXIS1, m_ZAxis);
    DDX_Text(pDX, IDC_EDIT_ZAXISGAIN, m_EditZAxisGain);
    DDX_Text(pDX, IDC_EDIT_ABSPTSPERFRAME, m_EditAbsPtsPerFrame);
    DDX_Text(pDX, IDC_EDIT_ZAXISOFFSET, m_EditZAxisOffset);
    DDX_Check(pDX, IDC_CHECK_USE_PALETTE, m_UsePalette);
    DDX_Text(pDX, IDC_EDIT_GDEPTH, m_EditGDepth);
    DDX_Radio(pDX, IDC_RADIO_ENVELOPE_SINE, m_RadioGShape);
    DDX_Radio(pDX, IDC_ABS_CLR_SHIFT1, m_ColorShift);
    //}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CAbstractControl, CDialog)
    //{{AFX_MSG_MAP(CAbstractControl)
    ON_WM_CLOSE()
    ON_BN_CLICKED(ID_ABSTRACT_CLOSE, OnCloseButton)
    ON_WM_VSCROLL()
    ON_BN_CLICKED(IDC_ABS_PATTERN1, OnAbsPattern1)
    ON_BN_CLICKED(IDC_ABS_PATTERN2, OnAbsPattern2)
    ON_BN_CLICKED(IDC_ABS_PATTERN3, OnAbsPattern3)
    ON_BN_CLICKED(IDC_ABS_PATTERN4, OnAbsPattern4)
    ON_BN_CLICKED(IDC_ABS_PATTERN5, OnAbsPattern5)
    ON_BN_CLICKED(IDC_ABS_PATTERN6, OnAbsPattern6)
    ON_BN_CLICKED(IDC_ABS_PATTERN7, OnAbsPattern7)
    ON_BN_CLICKED(IDC_ABS_PATTERN8, OnAbsPattern8)
    ON_BN_CLICKED(IDC_ABS_ZAXIS1, OnAbsZaxis1)
    ON_BN_CLICKED(IDC_ABS_ZAXIS2, OnAbsZaxis2)
    ON_BN_CLICKED(IDC_ABS_ZAXIS3, OnAbsZaxis3)
    ON_BN_CLICKED(IDC_ABS_ZAXIS4, OnAbsZaxis4)
    ON_BN_CLICKED(IDC_ABS_ZAXIS5, OnAbsZaxis5)
    ON_BN_CLICKED(IDC_ABS_ZAXIS6, OnAbsZaxis6)
    ON_BN_CLICKED(IDC_ABS_ZAXIS7, OnAbsZaxis7)
    ON_BN_CLICKED(IDC_ABS_ZAXIS8, OnAbsZaxis8)
    ON_BN_CLICKED(IDC_BUTTON_ABS_SAVE, OnButtonAbsSave)
    ON_BN_CLICKED(IDC_CHECK_USE_PALETTE, OnCheckUsePalette)
    ON_BN_CLICKED(IDC_RADIO_ENVELOPE_SINE, OnRadioEnvelopeSine)
    ON_BN_CLICKED(IDC_RADIO_ENVELOPE_SQUARE, OnRadioEnvelopeSquare)
    ON_BN_CLICKED(IDC_ABS_CLR_SHIFT1, OnAbsClrShift1)
    ON_BN_CLICKED(IDC_ABS_CLR_SHIFT2, OnAbsClrShift2)
    ON_BN_CLICKED(IDC_ABS_CLR_SHIFT3, OnAbsClrShift3)
    ON_BN_CLICKED(IDC_ABS_CLR_SHIFT4, OnAbsClrShift4)
    ON_BN_CLICKED(IDC_ABS_CLR_SHIFT5, OnAbsClrShift5)
    ON_BN_CLICKED(IDC_ABS_CLR_SHIFT6, OnAbsClrShift6)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CAbstractControl message handlers

void CAbstractControl::OnClose() 
{
    // TODO: Add your message handler code here and/or call default

#ifdef ABTRACTCONTROL_LOG_INFO
    logFile << "Entering CAbstractControl::OnClose()" << endl;
#endif
    OnCloseButton();

    // CDialog::OnClose();
}

void CAbstractControl::OnCloseButton() 
{
    // TODO: Add your control notification handler code here
    
#ifdef ABSTRACTCONTROL_LOG_INFO
    logFile << "Entering CAbstractControl::OnCloseButton()" << endl;
#endif
    parentPtr->abstractDialog = 0;
    DestroyWindow();
    delete(this);

}

void CAbstractControl::InitControlSettings(void)
{
    // GChangeNumber (aka envelope speed)
    m_SliderGChangeNumber.SetPos(3600);
    m_EditGChangeNumber = 0;

    // envelopeDepth
    m_SliderGDepth.SetPos(100);
    m_EditGDepth = 0;

    // envelopeShape
    m_RadioGShape = 0;

    // ZChangeNumber
    m_SliderZChangeNumber.SetPos(360);
    m_EditZChangeNumber = 0;
    // Gain Z
    m_SliderFactor1.SetPos(100);
    m_EditFactor1 = 0;
    // Offset Z
    m_SliderFactor5.SetPos(3600);
    m_EditFactor5 = 0;

    // ZzChangeNumber
    m_SliderZzChangeNumber.SetPos(360);
    m_EditZzChangeNumber = 0;
    // Gain Zz
    m_SliderFactor2.SetPos(100);
    m_EditFactor2 = 0;
    // Offset Zz
    m_SliderFactor6.SetPos(3600);
    m_EditFactor6 = 0;

    // ZzzChangeNumber
    m_SliderFactor7.SetPos(360);
    m_EditFactor7 = 0;
    // Gain Zzz
    m_SliderFactor3.SetPos(100);
    m_EditFactor3 = 0;
    // Offset Zzz
    m_SliderFactor4.SetPos(3600);
    m_EditFactor4 = 0;

    m_SliderColorSpeed.SetPos(3600);
    m_EditColorSpeed = 0;
    m_SliderBlankSpeed.SetPos(3600);
    m_EditBlankSpeed = 0;
    m_SliderBlankSpot.SetPos(200);
    m_EditBlankSpot = 0;
    m_SliderRedOffset.SetPos(360);
    m_EditRedOffset = 0;
    m_SliderGreenOffset.SetPos(360);
    m_EditGreenOffset = 0;
    m_SliderBlueOffset.SetPos(360);
    m_EditBlueOffset = 0;
    m_SliderZAxisOffset.SetPos(360);
    m_EditZAxisOffset = 0;
    m_SliderZAxisGain.SetPos(100);
    m_EditZAxisGain = 0;
    m_SliderAbsPtsPerFrame.SetPos(2000);
    m_EditAbsPtsPerFrame = 0;

    m_UsePalette = 0;

    m_AbstractPattern = 0;
    m_ZAxis = 0;
    m_ColorShift = 0;

    UpdateData(FALSE);
}

void CAbstractControl::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) 
{
/*	CScrollBar* sb = GetScrollBarCtrl(SB_VERT);

    if (sb)
    {
    int pos = sb->GetScrollPos();

    switch(nSBCode)
    {
        case SB_LINEUP:
            pos -= 1;
            break;
        case SB_LINEDOWN:
            pos += 1;
            break;
        default:
            break;
    }

    sb->SetScrollPos(pos, TRUE);
    }
    else
    {
    logFile << "NULL scroll bar pointer returned!" << endl;
    }
*/
//    int kbd_input = 0;
//	M_UINT16 scrollFast = M_FALSE;

//	if (_kbhit())
//	{
//        kbd_input = getch();
// logFile << "Key 0x" << hex << kbd_input << dec << " was pressed." << endl;
//	}

    // GChangeNumber
    m_EditGChangeNumber = 3600 - m_SliderGChangeNumber.GetPos();
    if (abstractPtr->GChngNum == 0 &&
        m_EditGChangeNumber != 0)
    {
        abstractPtr->GReal = PI/2.0;
    }
    abstractPtr->GChngNum = m_EditGChangeNumber;

    // envelopeDepth
    m_EditGDepth = 100 - m_SliderGDepth.GetPos();
    abstractPtr->envelopeDepth = m_EditGDepth;

    int count = 0;
    // ZChangeNumber
    m_EditZChangeNumber = 360 - m_SliderZChangeNumber.GetPos();
    if (m_EditZChangeNumber == 0 &&
        abstractPtr->ZChngNum != 0)
    {
        ++count;
    }
    abstractPtr->ZChngNum = m_EditZChangeNumber;
    // Gain Z
    m_EditFactor1 = 100 - m_SliderFactor1.GetPos();
    if (m_EditFactor1 == 0 &&
        abstractPtr->GainZ != 0)
    {
        ++count;
    }
    abstractPtr->GainZ = m_EditFactor1;
    // Offset Z
    m_EditFactor5 = 3600 - m_SliderFactor5.GetPos();
    if (m_EditFactor5 == 0 &&
        abstractPtr->OffsetZ != 0)
    {
        ++count;
    }
    abstractPtr->OffsetZ = m_EditFactor5;

    // ZzChangeNumber
    m_EditZzChangeNumber = 360 - m_SliderZzChangeNumber.GetPos();
    if (m_EditZzChangeNumber == 0 &&
        abstractPtr->ZzChngNum != 0)
    {
        ++count;
    }
    abstractPtr->ZzChngNum = m_EditZzChangeNumber;
    // Gain Zz
    m_EditFactor2 = 100 - m_SliderFactor2.GetPos();
    if (m_EditFactor2 == 0 &&
        abstractPtr->GainZz != 0)
    {
        ++count;
    }
    abstractPtr->GainZz = m_EditFactor2;
    // Offset Zz
    m_EditFactor6 = 3600 - m_SliderFactor6.GetPos();
    if (m_EditFactor6 == 0 &&
        abstractPtr->OffsetZz != 0)
    {
        ++count;
    }
    abstractPtr->OffsetZz = m_EditFactor6;

    // ZzzChangeNumber
    m_EditFactor7 = 360 - m_SliderFactor7.GetPos();
    if (m_EditFactor7 == 0 &&
        abstractPtr->ZzzChngNum != 0)
    {
        ++count;
    }
    abstractPtr->ZzzChngNum = m_EditFactor7;
    // Gain Zzz
    m_EditFactor3 = 100 - m_SliderFactor3.GetPos();
    if (m_EditFactor3 == 0 &&
        abstractPtr->GainZzz != 0)
    {
        ++count;
    }
    abstractPtr->GainZzz = m_EditFactor3;
    // Offset Zzz
    m_EditFactor4 = 3600 - m_SliderFactor4.GetPos();
    if (m_EditFactor4 == 0 &&
        abstractPtr->OffsetZzz != 0)
    {
        ++count;
    }
    abstractPtr->OffsetZzz = m_EditFactor4;

    if (abstractPtr->ZChngNum   == 0 &&
        abstractPtr->GainZ      == 0 &&
        abstractPtr->OffsetZ    == 0 &&
        abstractPtr->ZzChngNum  == 0 &&
        abstractPtr->GainZz     == 0 &&
        abstractPtr->OffsetZz   == 0 &&
        abstractPtr->ZzzChngNum == 0 &&
        abstractPtr->GainZzz    == 0 &&
        abstractPtr->OffsetZzz  == 0 &&
        count)
    {
//        srand( (unsigned)time( NULL ) );

        double randomReal1 = 0;
        while (randomReal1 == 0.0)
        {
            randomReal1 = (double)getrandom(0,100);
        }

        double randomReal2 = 0;
        while (randomReal2 == 0.0)
        {
            randomReal2 = (double)getrandom(0,100);
        }

        double randomReal3 = 0;
        while (randomReal3 == 0.0)
        {
            randomReal3 = (double)getrandom(0,100);
        }

        int choice = getrandom(0,6);

        switch (choice)
        {
        case 0:
            abstractPtr->Zr  = 0;
            break;
        case 1:
            abstractPtr->Zr = 1.0 / randomReal1;
            break;
        case 2:
            abstractPtr->Zr = 10.0 / randomReal1;
            break;
        case 3:
            abstractPtr->Zr = randomReal2 / randomReal1;
            break;
        case 4:
            abstractPtr->Zr = -(1.0 / randomReal1);
            break;
        case 5:
            abstractPtr->Zr = -(10.0 / randomReal1);
            break;
        case 6:
            abstractPtr->Zr = -(randomReal2 / randomReal1);
            break;
        default:
            abstractPtr->Zr  = 0;
            break;
        }

        choice = getrandom(0,6);

        switch (choice)
        {
        case 0:
            abstractPtr->Zzr = 0;
            break;
        case 1:
            abstractPtr->Zzr = 1.0 / randomReal2;
            break;
        case 2:
            abstractPtr->Zzr = 10.0 / randomReal2;
            break;
        case 3:
            abstractPtr->Zzr = randomReal3 / randomReal2;
            break;
        case 4:
            abstractPtr->Zzr = -(1.0 / randomReal2);
            break;
        case 5:
            abstractPtr->Zzr = -(10.0 / randomReal2);
            break;
        case 6:
            abstractPtr->Zzr = -(randomReal3 / randomReal2);
            break;
        default:
            abstractPtr->Zzr = 0;
            break;
        }

        choice = getrandom(0,6);

        switch (choice)
        {
        case 0:
            abstractPtr->Zzzr = 0;
            break;
        case 1:
            abstractPtr->Zzzr = 1.0 / randomReal3;
            break;
        case 2:
            abstractPtr->Zzzr = 10.0 / randomReal3;
            break;
        case 3:
            abstractPtr->Zzzr = randomReal1 / randomReal3;
            break;
        case 4:
            abstractPtr->Zzzr = -(1.0 / randomReal3);
            break;
        case 5:
            abstractPtr->Zzzr = -(10.0 / randomReal3);
            break;
        case 6:
            abstractPtr->Zzzr = -(randomReal1 / randomReal3);
            break;
        default:
            abstractPtr->Zzzr = 0;
            break;
        }

#ifdef ABSTRACTCONTROL_LOG_INFO
logFile << "Zr: " << abstractPtr->Zr
        << ", Zzr: " << abstractPtr->Zzr
        << ", Zzzr: " << abstractPtr->Zzzr << endl;
#endif
    }

    m_EditColorSpeed = 3600 - m_SliderColorSpeed.GetPos();
    abstractPtr->ColorSpd = m_EditColorSpeed;
    m_EditBlankSpeed = 3600 - m_SliderBlankSpeed.GetPos();
    abstractPtr->BlankSpd = m_EditBlankSpeed;
    m_EditBlankSpot = 200 - m_SliderBlankSpot.GetPos();
    abstractPtr->BlankSpot = m_EditBlankSpot;
    m_EditRedOffset = 360 - m_SliderRedOffset.GetPos();
    abstractPtr->redOffset = m_EditRedOffset;
    m_EditGreenOffset = 360 - m_SliderGreenOffset.GetPos();
    abstractPtr->greenOffset = m_EditGreenOffset;
    m_EditBlueOffset = 360 - m_SliderBlueOffset.GetPos();
    abstractPtr->blueOffset = m_EditBlueOffset;

//	m_AbstractPattern = abstractPtr->Formula - 1;
//	m_ZAxis = abstractPtr->ZAxisFormula - 1;
    m_EditZAxisGain = 100 - m_SliderZAxisGain.GetPos();
    abstractPtr->ZAxisGain = m_EditZAxisGain;
    m_EditZAxisOffset = 360 - m_SliderZAxisOffset.GetPos();
    abstractPtr->ZAxisOffset = m_EditZAxisOffset;
    m_EditAbsPtsPerFrame = 2000 - m_SliderAbsPtsPerFrame.GetPos();
    abstractPtr->AbsPtsPerFrame = m_EditAbsPtsPerFrame;

    UpdateData(FALSE);
    
//	CDialog::OnVScroll(nSBCode, nPos, pScrollBar);
}

void CAbstractControl::OnAbsPattern1() 
{
    abstractPtr->Formula = 1;
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsPattern2() 
{
    abstractPtr->Formula = 2;		
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsPattern3() 
{
    abstractPtr->Formula = 3;	
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsPattern4() 
{
    abstractPtr->Formula = 4;	
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsPattern5() 
{
    abstractPtr->Formula = 5;	
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsPattern6() 
{
    abstractPtr->Formula = 6;	
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsPattern7() 
{
    abstractPtr->Formula = 7;	
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsPattern8() 
{
    abstractPtr->Formula = 8;	
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsZaxis1() 
{
    abstractPtr->ZAxisFormula = 1;
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsZaxis2() 
{
    abstractPtr->ZAxisFormula = 2;
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsZaxis3() 
{
    abstractPtr->ZAxisFormula = 3;
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsZaxis4() 
{
    abstractPtr->ZAxisFormula = 4;
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsZaxis5() 
{
    abstractPtr->ZAxisFormula = 5;
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsZaxis6() 
{
    abstractPtr->ZAxisFormula = 6;
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsZaxis7() 
{
    abstractPtr->ZAxisFormula = 7;
    UpdateData(TRUE);
}

void CAbstractControl::OnAbsZaxis8() 
{
    // This one's a place holder for now...
    abstractPtr->ZAxisFormula = 8;
    UpdateData(TRUE);
}

void CAbstractControl::OnButtonAbsSave() 
{
    M_UINT16 i=0;
    char fileTitle[MAX_FILETITLE_SIZE];
    char fileName[MAX_FILENAME_SIZE];

    OPENFILENAME ofn;
    memset(&ofn, 0, sizeof(ofn));
    ofn.lStructSize = sizeof(OPENFILENAME);
    ofn.hwndOwner = NULL;
    ofn.hInstance = NULL;

    ofn.lpstrFilter =
    TEXT("Abstract data definition files *.abs\0*.ABS\0All Files *.*\0*.*\0\0");

    ofn.lpstrCustomFilter = NULL;
    ofn.nMaxCustFilter = 0;
    ofn.nFilterIndex = 1;
    ofn.lpstrFile = fileName;
    ofn.nMaxFile = 500;
    ofn.lpstrFileTitle = fileTitle;
    ofn.nMaxFileTitle = 99;
    ofn.lpstrInitialDir = NULL;
    ofn.lpstrTitle = "Save Abstract File";
    ofn.Flags = OFN_FILEMUSTEXIST;
    ofn.lpstrDefExt = "ILD";
    ofn.lCustData = NULL;
    ofn.lpfnHook = NULL;
    ofn.lpTemplateName = NULL;

    fileName[0] = '\0';

    GetSaveFileName(&ofn);

    if (fileName[0] == '\0')
    {
#ifdef ABSTRACTCONTROL_LOG_ERROR
        logFile << "OnButtonAbsSave(): GetSaveFileName() failed." << endl;
#endif
    return;
    }
    else
    {
        logFile << "Saving abstract file: " << &fileName[0] << endl;
    }

//  	int theIndex = (abstractPtr->PatternNumber - 1) * INTS_PER_PATTERN;
    int theIndex = 0;

    abstractPtr->intArray[theIndex] = abstractPtr->Formula;
    if (m_UsePalette == TRUE)
    {
        abstractPtr->intArray[theIndex] |= 0x8000;
    }
    ++theIndex;
    abstractPtr->intArray[theIndex++] = abstractPtr->ZChngNum;
    abstractPtr->intArray[theIndex++] = abstractPtr->ZzChngNum;
    abstractPtr->intArray[theIndex++] = abstractPtr->ZzzChngNum;	
    abstractPtr->intArray[theIndex++] = abstractPtr->GChngNum;
    abstractPtr->intArray[theIndex++] = abstractPtr->ColorPtn;
    abstractPtr->intArray[theIndex++] = abstractPtr->ColorSpd;
    abstractPtr->intArray[theIndex++] = abstractPtr->BlankSpd;
    abstractPtr->intArray[theIndex++] = abstractPtr->BlankSpot;
    abstractPtr->intArray[theIndex++] = abstractPtr->ZRed;
    abstractPtr->intArray[theIndex++] = abstractPtr->ZBlue;
    abstractPtr->intArray[theIndex++] = abstractPtr->ZGreen;
    abstractPtr->intArray[theIndex++] = (abstractPtr->envelopeShape << 12) | abstractPtr->envelopeDepth;

//    theIndex = (abstractPtr->PatternNumber - 1) * INT2S_PER_PATTERN;
    theIndex = 0;

    abstractPtr->int2Array[theIndex++] = abstractPtr->redOffset;	
    abstractPtr->int2Array[theIndex++] = abstractPtr->greenOffset;	
    abstractPtr->int2Array[theIndex++] = abstractPtr->blueOffset;	
    abstractPtr->int2Array[theIndex++] = abstractPtr->GainZ;	
    abstractPtr->int2Array[theIndex++] = abstractPtr->GainZz;	
    abstractPtr->int2Array[theIndex++] = abstractPtr->GainZzz;	
    abstractPtr->int2Array[theIndex++] = abstractPtr->OffsetZ;
    abstractPtr->int2Array[theIndex++] = abstractPtr->OffsetZz;	
    abstractPtr->int2Array[theIndex++] = abstractPtr->OffsetZzz;	
    abstractPtr->int2Array[theIndex++] = abstractPtr->ZAxisFormula;
    abstractPtr->int2Array[theIndex++] = abstractPtr->ZAxisGain;
    abstractPtr->int2Array[theIndex++] = abstractPtr->AbsPtsPerFrame;	
    abstractPtr->int2Array[theIndex++] = abstractPtr->ZAxisOffset;	

//    theIndex = (abstractPtr->PatternNumber - 1) * REALS_PER_PATTERN;
    theIndex = 0;

    abstractPtr->realArray[theIndex++] = (double)(abstractPtr->Zr);	
    abstractPtr->realArray[theIndex++] = (double)(abstractPtr->Zzr);	
    abstractPtr->realArray[theIndex++] = (double)(abstractPtr->Zzzr);	
    abstractPtr->realArray[theIndex++] = (double)(abstractPtr->GReal);	

    abstractPtr->realArray[theIndex++] = (double)(abstractPtr->Z);
    abstractPtr->realArray[theIndex++] = (double)(abstractPtr->Zz);
    abstractPtr->realArray[theIndex++] = (double)(abstractPtr->Zzz);
    abstractPtr->realArray[theIndex++] = (double)(abstractPtr->G);
    abstractPtr->realArray[theIndex++] = (double)(abstractPtr->Blankerizer);
    abstractPtr->realArray[theIndex++] = (double)(abstractPtr->Colorizer);
    abstractPtr->realArray[theIndex++] = 0.0;
    abstractPtr->realArray[theIndex++] = 0.0;

    char currentDirName[_MAX_PATH];

    // Get the current working directory:
    if( _getcwd( currentDirName, _MAX_PATH ) == NULL )
    {
#ifdef ABSTRACTCONTROL_LOG_ERROR
           logFile << "CAbstractControl::OnButtonAbsSave(): Unable to get current directory name." 
                   << endl;
#endif
           return;
    }

    // Change to the "app" directory...
    if (_chdir(appDirName) == -1)
    {
#ifdef ABSTRACTCONTROL_LOG_ERROR
           logFile << "CAbstractControl::OnButtonAbsSave(): Unable to change to app directory\n" 
                   << appDirName << endl;
#endif
           return;
    }

    FILE*    absOutFile;
    fopen_s(&absOutFile, &fileName[0], "wt");

    if (absOutFile) // file was successfully opened
    {
       if (!fprintf(absOutFile,"%d\n\n", MAX_INT_ARRAY))
       {
#ifdef ABSTRACTCONTROL_LOG_ERROR
           logFile << "CAbstractControl::OnButtonAbsSave(): Unable to write INT header info." 
                   << endl;
#endif
           fclose(absOutFile);
           return;
       }

       for (i=0 ; i<MAX_INT_ARRAY ; ++i)
       {
           if (!fprintf(absOutFile,"%d\n", abstractPtr->intArray[i]))
           {
#ifdef ABSTRACTCONTROL_LOG_ERROR
               logFile << "CAbstractControl::OnButtonAbsSave(): Can't write next entry "
                       << "to file " << &fileName[0] << endl;
#endif
               fclose(absOutFile);
               return;
           }

           if (!((i+1)%MAX_INT_ARRAY))
           {
               fprintf(absOutFile,"\n");
           }

#ifdef ABSTRACTCONTROL_LOG_INFO
           logFile << "CAbstractControl::OnButtonAbsSave(): intArray[" << dec << i
                   << "] = " << abstractPtr->intArray[i] << endl;
#endif

       }

       if (!fprintf(absOutFile,"%d\n\n", MAX_REAL_ARRAY))
       {
#ifdef ABSTRACTCONTROL_LOG_ERROR
           logFile << "CAbstractControl::OnButtonAbsSave(): Unable to write REAL header info." 
                   << endl;
#endif
           fclose(absOutFile);
           return;
       }

       for (i=0 ; i<MAX_REAL_ARRAY ; ++i)
       {
           if (!fprintf(absOutFile,"%lf\n", abstractPtr->realArray[i]))
           {
#ifdef ABSTRACTCONTROL_LOG_ERROR
               logFile << "CAbstractControl::OnButtonAbsSave(): Can't write next entry "
                << "to file " << &fileName[0] << endl;
#endif
               fclose(absOutFile);
               return;
           }

           if (!((i+1)%MAX_REAL_ARRAY))
           {
               fprintf(absOutFile,"\n");
           }

#ifdef ABSTRACTCONTROL_LOG_INFO
           logFile << "CAbstractControl::OnButtonAbsSave(): realArray[" << dec << i
                   << "] = " << abstractPtr->realArray[i] << endl;
#endif

       }

       if (!fprintf(absOutFile,"%d\n\n", MAX_INT2_ARRAY))
       {
#ifdef ABSTRACTCONTROL_LOG_ERROR
           logFile << "CAbstractControl::OnButtonAbsSave(): Unable to write INT2 header info." 
                   << endl;
#endif
           fclose(absOutFile);
           return;
       }

       for (i=0 ; i<MAX_INT2_ARRAY ; ++i)
       {
           if (!fprintf(absOutFile,"%d\n", abstractPtr->int2Array[i]))
           {
#ifdef ABSTRACTCONTROL_LOG_ERROR
               logFile << "CAbstractControl::OnButtonAbsSave(): Can't write next entry "
                << "to file " << &fileName[0] << endl;
#endif
               fclose(absOutFile);
               return;
           }

           if (!((i+1)%MAX_INT2_ARRAY))
           {
               fprintf(absOutFile,"\n");
           }

#ifdef ABSTRACTCONTROL_LOG_INFO
           logFile << "CAbstractControl::OnButtonAbsSave(): int2Array[" << dec << i
                   << "] = " << abstractPtr->int2Array[i] << endl;
#endif

       }
    }
    else
    {
#ifdef ABSTRACTCONTROL_LOG_ERROR
        logFile << "CAbstractControl::OnButtonAbsSave(): Unable to open file " 
                << & fileName[0] << endl;
#endif
        return;
    }

    fclose(absOutFile);

    // Change to the "root" directory...
    if (_chdir(currentDirName) == -1)
    {
#ifdef ABSTRACT_LOG_ERROR
           logFile << "Abstract::Abstract(): Unable to return to working directory\n" 
                   << currentDirName << endl;
#endif
           abstractPtr->okFlag = M_FALSE;
           return;
    }
    // Set document title 
    CCheap3DDoc* pDoc = parentPtr->GetDocument();
    pDoc->SetTitle(&fileName[0]);
}

void CAbstractControl::OnCheckUsePalette() 
{
    UpdateData(TRUE);	

    if(m_UsePalette == TRUE)
    {
        abstractPtr->usePalette = M_TRUE;
    }
    else
    {
        abstractPtr->usePalette = M_FALSE;
    }

}

void CAbstractControl::OnRadioEnvelopeSine() 
{
    UpdateData(TRUE);
    abstractPtr->envelopeShape = SINE;	
}

void CAbstractControl::OnRadioEnvelopeSquare() 
{
    UpdateData(TRUE);
    abstractPtr->envelopeShape = SQUARE;
}

void CAbstractControl::OnAbsClrShift1() 
{
    abstractPtr->ColorPtn = 1;
    UpdateData(TRUE);	
}

void CAbstractControl::OnAbsClrShift2() 
{
    abstractPtr->ColorPtn = 2;
    UpdateData(TRUE);		
}

void CAbstractControl::OnAbsClrShift3() 
{
    abstractPtr->ColorPtn = 3;
    UpdateData(TRUE);		
}

void CAbstractControl::OnAbsClrShift4() 
{
    abstractPtr->ColorPtn = 4;
    UpdateData(TRUE);		
}

void CAbstractControl::OnAbsClrShift5() 
{
    abstractPtr->ColorPtn = 5;
    UpdateData(TRUE);		
}

void CAbstractControl::OnAbsClrShift6() 
{
    abstractPtr->ColorPtn = 6;
    UpdateData(TRUE);		
}
