//
// *********************************************************
// *                                                       *
// * Copyright 1998-2022, Lazerus Laser Systems            *
// * Author: Michael G. Svob                               *
// *                                                       *
// * File Name: PrefProppageLiveControl.cpp                *
// * Description: Implementation of the                    *
// * CPrefProppageLiveControl class, which is the Live     *
// * Control property page.                                *
// *                                                       *
// * NOTE: This file was generated by MS Visual Studio,    *
// *       and modified by the author as necessary for     *
// *       the LFI Player application.
// *                                                       *
// * This code is distributed under the GNU Public License *
// * which can be found at...                              *
// *                                                       *
// * http://www.gnu.org/licenses/gpl.txt                   *
// *                                                       *
// *********************************************************
//

#include "stdafx.h"
#include "Cheap3D.h"
#include "PrefProppageLiveControl.h"
#include "Cheap3DView.h"
#include <iostream>
#include <fstream>

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

using namespace std; 

extern ofstream logFile;

/////////////////////////////////////////////////////////////////////////////
// CPrefProppageLiveControl property page

IMPLEMENT_DYNCREATE(CPrefProppageLiveControl, CPropertyPage)

CPrefProppageLiveControl::CPrefProppageLiveControl() : CPropertyPage(CPrefProppageLiveControl::IDD)
{
	//{{AFX_DATA_INIT(CPrefProppageLiveControl)
		// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CPrefProppageLiveControl::~CPrefProppageLiveControl()
{
}

BOOL CPrefProppageLiveControl::OnSetActive()
{
	CPropertyPage::OnSetActive();

	m_SliderFadeIn.SetRange(1, 100);
	m_SliderFadeIn.SetTicFreq(10);
	m_FadeInFrames = parentPtr->fadeInFrames;
	m_SliderFadeIn.SetPos(m_FadeInFrames);

	m_SliderFadeOut.SetRange(1, 100);
	m_SliderFadeOut.SetTicFreq(10);
	m_FadeOutFrames = parentPtr->fadeOutFrames;
	m_SliderFadeOut.SetPos(m_FadeOutFrames);

	m_SliderMoveIncrement.SetRange(1, MAX_MOVE_INCREMENT);
	m_SliderMoveIncrement.SetTicFreq(MAX_MOVE_INCREMENT/10);
	m_MoveIncrement = parentPtr->moveIncrement;
	m_SliderMoveIncrement.SetPos(m_MoveIncrement);

	m_SliderZoomIncrement.SetRange(1, MAX_ZOOM_INCREMENT);
	m_SliderZoomIncrement.SetTicFreq(MAX_ZOOM_INCREMENT/10);
	m_ZoomIncrement = parentPtr->zoomIncrement;
	m_SliderZoomIncrement.SetPos(m_ZoomIncrement);

	m_SliderRotateIncrement.SetRange(1, MAX_ROTATE_INCREMENT);
	m_SliderRotateIncrement.SetTicFreq(MAX_ROTATE_INCREMENT/10);
	m_RotateIncrement = parentPtr->rotateIncrement;
	m_SliderRotateIncrement.SetPos(m_RotateIncrement);

	m_SliderDragInertia.SetRange(0, 500);
	m_SliderDragInertia.SetTicFreq(100);
	m_DragInertia = parentPtr->dragInertia;
	m_SliderDragInertia.SetPos(m_DragInertia);

    m_SpinCtrlDragSpeed.SetRange(1,7);
//    m_SpinCtrlDragSpeed.SetBuddy(0);
    m_DragSpeed = parentPtr->dragSpeed;
    m_SpinCtrlDragSpeed.SetPos(m_DragSpeed);

    m_EditContentRootDirectory = parentPtr->contentDirectoryName;

	UpdateData(FALSE);

	return true;
}

void CPrefProppageLiveControl::DoDataExchange(CDataExchange* pDX)
{
	CPropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CPrefProppageLiveControl)
	DDX_Control(pDX, IDC_SLIDER_FADE_OUT, m_SliderFadeOut);
	DDX_Control(pDX, IDC_SLIDER_FADE_IN, m_SliderFadeIn);
	DDX_Control(pDX, IDC_SLIDER_ZOOM_INCREMENT, m_SliderZoomIncrement);
	DDX_Control(pDX, IDC_SLIDER_ROTATE_INCREMENT, m_SliderRotateIncrement);
	DDX_Control(pDX, IDC_SLIDER_MOVE_INCREMENT, m_SliderMoveIncrement);
	DDX_Control(pDX, IDC_SLIDER_DRAG_INERTIA, m_SliderDragInertia);
	DDX_Control(pDX, IDC_SPIN_DRAG_SPEED, m_SpinCtrlDragSpeed);
	DDX_Text(pDX, IDC_EDIT_FADE_IN, m_FadeInFrames);
	DDX_Text(pDX, IDC_EDIT_FADE_OUT, m_FadeOutFrames);
	DDX_Text(pDX, IDC_EDIT_MOVE_INCREMENT, m_MoveIncrement);
	DDX_Text(pDX, IDC_EDIT_ROTATE_INCREMENT, m_RotateIncrement);
	DDX_Text(pDX, IDC_EDIT_ZOOM_INCREMENT, m_ZoomIncrement);
	DDX_Text(pDX, IDC_EDIT_DRAG_INERTIA, m_DragInertia);
	DDX_Text(pDX, IDC_EDIT_DRAG_SPEED, m_DragSpeed);
	DDX_Text(pDX, IDC_EDIT_CONTENT_ROOT_DIR, m_EditContentRootDirectory);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CPrefProppageLiveControl, CPropertyPage)
	//{{AFX_MSG_MAP(CPrefProppageLiveControl)
	ON_WM_HSCROLL()
	ON_WM_VSCROLL()
	ON_EN_UPDATE(IDC_EDIT_CONTENT_ROOT_DIR, OnUpdateEditContentRootDirectory)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CPrefProppageLiveControl message handlers
void CPrefProppageLiveControl::OnUpdateEditContentRootDirectory()
{
    UpdateData(TRUE);

    strcpy_s(parentPtr->contentDirectoryName, (LPCTSTR)m_EditContentRootDirectory); 
}

void CPrefProppageLiveControl::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) 
{
//    m_DragSpeed = m_SpinCtrlDragSpeed.GetPos();
    m_DragSpeed = nPos;
	parentPtr->dragSpeed = m_DragSpeed;

	UpdateData(FALSE);
}

void CPrefProppageLiveControl::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) 
{
    m_FadeInFrames = m_SliderFadeIn.GetPos();
	parentPtr->fadeInFrames = m_FadeInFrames;

    m_FadeOutFrames = m_SliderFadeOut.GetPos();
	parentPtr->fadeOutFrames = m_FadeOutFrames;
    
	m_MoveIncrement = m_SliderMoveIncrement.GetPos();
    parentPtr->moveIncrement = m_MoveIncrement;

	m_ZoomIncrement = m_SliderZoomIncrement.GetPos();
	parentPtr->zoomIncrement = m_ZoomIncrement;

	m_RotateIncrement = m_SliderRotateIncrement.GetPos();
	parentPtr->rotateIncrement = m_RotateIncrement;

	m_DragInertia = m_SliderDragInertia.GetPos();
	parentPtr->dragInertia = m_DragInertia;

	UpdateData(FALSE);

}
