#ifdef LEGACY_OUTPUT
//
// *********************************************************
// *                                                       *
// * Copyright 1998-2022, Lazerus Laser Systems            *
// * Author: Michael G. Svob                               *
// *                                                       *
// * File Name: SelectPort.cpp                             *
// * Description: Implementation of the CSelectPort        *
// * dialog class, which allows selection of the base      *
// * address for ISA laser output devices, such as the     *
// * Laser Illusions GWS and BSoft DAC cards.              *
// *                                                       *
// * NOTE: This file was generated by MS Visual Studio,    *
// *       and modified by the author as necessary for     *
// *       the LFI Player application.
// *                                                       *
// * This code is distributed under the GNU Public License *
// * which can be found at...                              *
// *                                                       *
// * http://www.gnu.org/licenses/gpl.txt                   *
// *                                                       *
// *********************************************************
//

#include "stdafx.h"
#include "Cheap3D.h"
#include "SelectPort.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CSelectPort dialog


CSelectPort::CSelectPort(CWnd* pParent /*=NULL*/)
	: CDialog(CSelectPort::IDD, pParent)
{
	parentPtr = (CCheap3DView*)pParent;

	//{{AFX_DATA_INIT(CSelectPort)
	//}}AFX_DATA_INIT

	// Note: following switch based on order of radio
	// button entries in CSelectPort message map.  If
	// the message map changes, so too will this need
	// to be changed.
    switch (parentPtr->GetLaserPort())
	{
		case 0x200: 
			m_PortButtonSelected = 0;
			break;
		case 0x220: 
			m_PortButtonSelected = 1;
			break;
		case 0x240: 
			m_PortButtonSelected = 2;
			break;
		case 0x260: 
			m_PortButtonSelected = 3;
			break;
		case 0x2A0: 
			m_PortButtonSelected = 4;
			break;
		case 0x2C0: 
			m_PortButtonSelected = 5;
			break;
		case 0x300: 
			m_PortButtonSelected = 6;
			break;
		case 0x320: 
			m_PortButtonSelected = 7;
			break;
		case 0x340: 
			m_PortButtonSelected = 8;
			break;
		case 0x360: 
			m_PortButtonSelected = 9;
			break;
		case 0x3A0: 
			m_PortButtonSelected = 10;
			break;
		case 0x3C0: 
			m_PortButtonSelected = 11;
			break;
		case 0x280: 
			m_PortButtonSelected = 12;
			break;
		case 0x2E0: 
			m_PortButtonSelected = 13;
			break;
		default:
			break;

	} // end switch on selected port

}


void CSelectPort::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CSelectPort)
	DDX_Radio(pDX, IDC_RADIO_PORT200, m_PortButtonSelected);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CSelectPort, CDialog)
	//{{AFX_MSG_MAP(CSelectPort)
	ON_BN_CLICKED(IDC_RADIO_PORT200, OnRadioPort200)
	ON_BN_CLICKED(IDC_RADIO_PORT220, OnRadioPort220)
	ON_BN_CLICKED(IDC_RADIO_PORT240, OnRadioPort240)
	ON_BN_CLICKED(IDC_RADIO_PORT260, OnRadioPort260)
	ON_BN_CLICKED(IDC_RADIO_PORT2A0, OnRadioPort2a0)
	ON_BN_CLICKED(IDC_RADIO_PORT2C0, OnRadioPort2c0)
	ON_BN_CLICKED(IDC_RADIO_PORT300, OnRadioPort300)
	ON_BN_CLICKED(IDC_RADIO_PORT320, OnRadioPort320)
	ON_BN_CLICKED(IDC_RADIO_PORT340, OnRadioPort340)
	ON_BN_CLICKED(IDC_RADIO_PORT360, OnRadioPort360)
	ON_BN_CLICKED(IDC_RADIO_PORT3A0, OnRadioPort3a0)
	ON_BN_CLICKED(IDC_RADIO_PORT3C0, OnRadioPort3c0)
	ON_BN_CLICKED(IDC_RADIO_PORT280, OnRadioPort280)
	ON_BN_CLICKED(IDC_RADIO_PORT2E0, OnRadioPort2e0)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSelectPort message handlers

void CSelectPort::OnRadioPort200() 
{
	parentPtr->SetLaserPort(0x200);
}

void CSelectPort::OnRadioPort220() 
{
	parentPtr->SetLaserPort(0x220);
}

void CSelectPort::OnRadioPort240() 
{
	parentPtr->SetLaserPort(0x240);
}

void CSelectPort::OnRadioPort260() 
{
	parentPtr->SetLaserPort(0x260);
}

void CSelectPort::OnRadioPort2a0() 
{
	parentPtr->SetLaserPort(0x2A0);
}

void CSelectPort::OnRadioPort2c0() 
{
	parentPtr->SetLaserPort(0x2C0);
}

void CSelectPort::OnRadioPort300() 
{
	parentPtr->SetLaserPort(0x300);
}

void CSelectPort::OnRadioPort320() 
{
	parentPtr->SetLaserPort(0x320);
}

void CSelectPort::OnRadioPort340() 
{
	parentPtr->SetLaserPort(0x340);
}

void CSelectPort::OnRadioPort360() 
{
	parentPtr->SetLaserPort(0x360);
}

void CSelectPort::OnRadioPort3a0() 
{
	parentPtr->SetLaserPort(0x3A0);
}

void CSelectPort::OnRadioPort3c0() 
{
	parentPtr->SetLaserPort(0x3C0);
}

void CSelectPort::OnRadioPort280() 
{
	parentPtr->SetLaserPort(0x280);
}

void CSelectPort::OnRadioPort2e0() 
{
	parentPtr->SetLaserPort(0x2E0);	
}

#endif
