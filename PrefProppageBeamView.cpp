//
// *********************************************************
// *                                                       *
// * Copyright 1998-2022, Lazerus Laser Systems            *
// * Author: Michael G. Svob                               *
// *                                                       *
// * File Name: PrefProppageBeamView.cpp                   *
// * Description: Implementation of the                    *
// * CPrefProppageBeamView class, which is the Beam View   *
// * property page.                                        *
// *                                                       *
// * NOTE: This file was generated by MS Visual Studio,    *
// *       and modified by the author as necessary for     *
// *       the LFI Player application.
// *                                                       *
// * This code is distributed under the GNU Public License *
// * which can be found at...                              *
// *                                                       *
// * http://www.gnu.org/licenses/gpl.txt                   *
// *                                                       *
// *********************************************************
//

#include "stdafx.h"
#include "Cheap3D.h"
#include "PrefProppageBeamView.h"
#include "Cheap3DView.h"
#include <iostream>
#include <fstream>

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

using namespace std; 

extern ofstream logFile;

/////////////////////////////////////////////////////////////////////////////
// CPrefProppageBeamView property page

IMPLEMENT_DYNCREATE(CPrefProppageBeamView, CPropertyPage)

CPrefProppageBeamView::CPrefProppageBeamView() : CPropertyPage(CPrefProppageBeamView::IDD)
{
    //{{AFX_DATA_INIT(CPrefProppageBeamView)
        // NOTE: the ClassWizard will add member initialization here
    m_RadioBeamMode = -1;
    //}}AFX_DATA_INIT
}

CPrefProppageBeamView::~CPrefProppageBeamView()
{
}

void CPrefProppageBeamView::DoDataExchange(CDataExchange* pDX)
{
    CPropertyPage::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CPrefProppageBeamView)
        // NOTE: the ClassWizard will add DDX and DDV calls here
    DDX_Control(pDX, IDC_SLIDER_BEAM_XORIGIN1, m_SliderBeamOriginX1);
    DDX_Control(pDX, IDC_SLIDER_BEAM_XORIGIN2, m_SliderBeamOriginX2);
    DDX_Control(pDX, IDC_SLIDER_BEAM_YORIGIN1, m_SliderBeamOriginY1);
    DDX_Control(pDX, IDC_SLIDER_BEAM_YORIGIN2, m_SliderBeamOriginY2);
    DDX_Control(pDX, IDC_SLIDER_BEAM_HEIGHT1, m_SliderBeamHeight1);
    DDX_Control(pDX, IDC_SLIDER_BEAM_HEIGHT2, m_SliderBeamHeight2);
    DDX_Check(pDX, IDC_CHECK_BEAM_ON1, m_CheckBeamOn1);
    DDX_Check(pDX, IDC_CHECK_BEAM_ON2, m_CheckBeamOn2);
    DDX_Check(pDX, IDC_CHECK_BEAM_INVERTX1, m_CheckBeamInvertX1);
    DDX_Check(pDX, IDC_CHECK_BEAM_INVERTX2, m_CheckBeamInvertX2);
    DDX_Check(pDX, IDC_CHECK_BEAM_YAG_VIEW, m_CheckBeamYagView);
    DDX_Text(pDX, IDC_EDIT_BEAM_XORIGIN1, m_BeamOriginX1);
    DDX_Text(pDX, IDC_EDIT_BEAM_XORIGIN2, m_BeamOriginX2);
    DDX_Text(pDX, IDC_EDIT_BEAM_YORIGIN1, m_BeamOriginY1);
    DDX_Text(pDX, IDC_EDIT_BEAM_YORIGIN2, m_BeamOriginY2);
    DDX_Text(pDX, IDC_EDIT_BEAM_HEIGHT1, m_BeamHeight1);
    DDX_Text(pDX, IDC_EDIT_BEAM_HEIGHT2, m_BeamHeight2);
    DDX_Radio(pDX, IDC_RADIO_BEAM_MODE_NORMAL, m_RadioBeamMode);
    //}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CPrefProppageBeamView, CPropertyPage)
    //{{AFX_MSG_MAP(CPrefProppageBeamView)
        // NOTE: the ClassWizard will add message map macros here
    ON_WM_HSCROLL()
    ON_BN_CLICKED(IDC_CHECK_BEAM_ON1, OnCheckBeamOn1)
    ON_BN_CLICKED(IDC_CHECK_BEAM_ON2, OnCheckBeamOn2)
    ON_BN_CLICKED(IDC_CHECK_BEAM_INVERTX1, OnCheckBeamInvertX1)
    ON_BN_CLICKED(IDC_CHECK_BEAM_INVERTX2, OnCheckBeamInvertX2)
    ON_BN_CLICKED(IDC_CHECK_BEAM_YAG_VIEW, OnCheckBeamYagView)
    ON_BN_CLICKED(IDC_RADIO_BEAM_MODE_NORMAL, OnBeamModeNormal)
    ON_BN_CLICKED(IDC_RADIO_BEAM_MODE_POINTS, OnBeamModeShowPoints)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CPrefProppageBeamView message handlers

BOOL CPrefProppageBeamView::OnSetActive()
{
    double tempFloat;
    M_UINT16 tempInt;

    CPropertyPage::OnSetActive();

    m_RadioBeamMode = (int)(parentPtr->beamMode);

    m_SliderBeamOriginX1.SetRange(1, 100);
    m_SliderBeamOriginX1.SetTicFreq(10);
    tempFloat = (double)(parentPtr->beamOriginX1) * 100.0;
    tempInt = (M_UINT16)tempFloat;
    tempFloat = tempFloat - tempInt;
    if (tempFloat >= 0.5)
    {
        m_BeamOriginX1 = tempInt + 1;
    }
    else
    {
        m_BeamOriginX1 = tempInt;
    }
    m_SliderBeamOriginX1.SetPos(m_BeamOriginX1);

    m_SliderBeamOriginY1.SetRange(1, 100);
    m_SliderBeamOriginY1.SetTicFreq(10);
    tempFloat = (double)(parentPtr->beamOriginY1) * 100.0;
    tempInt = (M_UINT16)tempFloat;
    tempFloat = tempFloat - tempInt;
    if (tempFloat >= 0.5)
    {
        m_BeamOriginY1 = tempInt + 1;
    }
    else
    {
        m_BeamOriginY1 = tempInt;
    }
    m_SliderBeamOriginY1.SetPos(m_BeamOriginY1);

    m_SliderBeamOriginX2.SetRange(1, 100);
    m_SliderBeamOriginX2.SetTicFreq(10);
    tempFloat = (double)(parentPtr->beamOriginX2) * 100.0;
    tempInt = (M_UINT16)tempFloat;
    tempFloat = tempFloat - tempInt;
    if (tempFloat >= 0.5)
    {
        m_BeamOriginX2 = tempInt + 1;
    }
    else
    {
        m_BeamOriginX2 = tempInt;
    }
    m_SliderBeamOriginX2.SetPos(m_BeamOriginX2);

    m_SliderBeamOriginY2.SetRange(1, 100);
    m_SliderBeamOriginY2.SetTicFreq(10);
    tempFloat = (double)(parentPtr->beamOriginY2) * 100.0;
    tempInt = (M_UINT16)tempFloat;
    tempFloat = tempFloat - tempInt;
    if (tempFloat >= 0.5)
    {
        m_BeamOriginY2 = tempInt + 1;
    }
    else
    {
        m_BeamOriginY2 = tempInt;
    }
    m_SliderBeamOriginY2.SetPos(m_BeamOriginY2);

    m_SliderBeamHeight1.SetRange(1, 100);
    m_SliderBeamHeight1.SetTicFreq(10);
    tempFloat = (double)(parentPtr->beamHeight1) * 100.0;
    tempInt = (M_UINT16)tempFloat;
    tempFloat = tempFloat - tempInt;
    if (tempFloat >= 0.5)
    {
        m_BeamHeight1 = tempInt + 1;
    }
    else
    {
        m_BeamHeight1 = tempInt;
    }
    m_SliderBeamHeight1.SetPos(m_BeamHeight1);

    m_SliderBeamHeight2.SetRange(1, 100);
    m_SliderBeamHeight2.SetTicFreq(10);
    tempFloat = (double)(parentPtr->beamHeight2) * 100.0;
    tempInt = (M_UINT16)tempFloat;
    tempFloat = tempFloat - tempInt;
    if (tempFloat >= 0.5)
    {
        m_BeamHeight2 = tempInt + 1;
    }
    else
    {
        m_BeamHeight2 = tempInt;
    }
    m_SliderBeamHeight2.SetPos(m_BeamHeight2);

    m_CheckBeamOn1 = parentPtr->beamOn1;
    m_CheckBeamOn2 = parentPtr->beamOn2;
    m_CheckBeamInvertX1 = parentPtr->beamInvertX1;
    m_CheckBeamInvertX2 = parentPtr->beamInvertX2;
    m_CheckBeamYagView = parentPtr->beamYagView;

    UpdateData(FALSE);

    return true;
}

void CPrefProppageBeamView::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) 
{
    m_BeamOriginX1 = m_SliderBeamOriginX1.GetPos();
    parentPtr->beamOriginX1 = (double)m_BeamOriginX1 / 100.0;

    m_BeamOriginY1 = m_SliderBeamOriginY1.GetPos();
    parentPtr->beamOriginY1 = (double)m_BeamOriginY1 / 100.0;

    m_BeamOriginX2 = m_SliderBeamOriginX2.GetPos();
    parentPtr->beamOriginX2 = (double)m_BeamOriginX2 / 100.0;

    m_BeamOriginY2 = m_SliderBeamOriginY2.GetPos();
    parentPtr->beamOriginY2 = (double)m_BeamOriginY2 / 100.0;

    m_BeamHeight1 = m_SliderBeamHeight1.GetPos();
    parentPtr->beamHeight1 = (double)m_BeamHeight1 / 100.0;

    m_BeamHeight2 = m_SliderBeamHeight2.GetPos();
    parentPtr->beamHeight2 = (double)m_BeamHeight2 / 100.0;

    UpdateData(FALSE);
}

void CPrefProppageBeamView::OnCheckBeamOn1() 
{
    UpdateData(TRUE);
    parentPtr->beamOn1 = m_CheckBeamOn1;
}

void CPrefProppageBeamView::OnCheckBeamOn2() 
{
    UpdateData(TRUE);
    parentPtr->beamOn2 = m_CheckBeamOn2;
}

void CPrefProppageBeamView::OnCheckBeamInvertX1() 
{
    UpdateData(TRUE);
    parentPtr->beamInvertX1 = m_CheckBeamInvertX1;
}

void CPrefProppageBeamView::OnCheckBeamInvertX2() 
{
    UpdateData(TRUE);
    parentPtr->beamInvertX2 = m_CheckBeamInvertX2;
}

void CPrefProppageBeamView::OnCheckBeamYagView() 
{
    UpdateData(TRUE);
    parentPtr->beamYagView = m_CheckBeamYagView;
}

void CPrefProppageBeamView::OnBeamModeNormal() 
{
    UpdateData(TRUE);
    parentPtr->beamMode = NORMAL;
}

void CPrefProppageBeamView::OnBeamModeShowPoints() 
{
    UpdateData(TRUE);
    parentPtr->beamMode = SHOWPOINTS;
}



